{"version":3,"sources":["logo.svg","comp.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","MyComponent","props","getDayName","dateStr","locale","Date","toLocaleDateString","weekday","state","error","isLoaded","snapshots","path","undefined","window","location","pathname","length","fetch","then","res","json","result","console","log","setState","counry","name","mapDayToCount","this","message","that","_","each","obj","day","timestamp","dayName","getDay","key","substring","isUndefined","todayCases","deaths","recovered","cases","Math","max","total","data","Object","keys","push","width","height","margin","top","right","left","bottom","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","dataKey","type","stroke","fillOpacity","fill","React","Component","App","className","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.a2bac5ed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { _  } from \"underscore\";\nimport {Area, AreaChart,Tooltip, LineChart, Line, CartesianGrid, XAxis, YAxis } from 'recharts';\n\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      snapshots: []\n    };\n  }\n\ngetDayName= function(dateStr, locale){\n    var date = new Date(dateStr);\n    return date.toLocaleDateString(locale, { weekday: 'long' });        \n}\n\n  componentDidMount() {\n    var path = window.location.pathname != undefined ? window.location.pathname : '/il'\n    if (path.length === 1) {\n      path = path + \"il\";\n    }\n    fetch(\"http://covid19.soficoop.com/country\" + path)\n      .then(res => res.json())\n      .then(\n        (result) => {\n        console.log(result);\n          this.setState({\n            isLoaded: true,\n            snapshots: result.snapshots,\n            counry: result.name\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  render() {\n      var mapDayToCount = {};\n    const { error, isLoaded, snapshots, counry } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n    var that = this;\n_.each(snapshots, function name(obj) {\nvar days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n// var days = ['1', '2', '3', '4', '5', '6', '7'];\n  var day = new Date(obj.timestamp);\nconsole.log(\"day day day \",that.getDayName(obj.timestamp, \"he-IL\"));\n  \n\nvar dayName = days[day.getDay()];\n    var date = obj.timestamp.substring(0, 12);\n    var key = date + \",\" + dayName;\n    if (_.isUndefined(mapDayToCount[key])) {\n        mapDayToCount[key] = {\n          'cases': obj.todayCases,\n           'deaths': obj.deaths,\n            'recovered': obj.recovered,\n            'total': obj.cases\n            };\n    } else {\n        mapDayToCount[key] = {\n          'cases': Math.max(obj.todayCases, mapDayToCount[key].cases),\n          'deaths': Math.max(obj.deaths, mapDayToCount[key].deaths),\n          'recovered': Math.max(obj.recovered, mapDayToCount[key].recovered),\n          'total': Math.max(obj.cases, mapDayToCount[key].total)\n          };\n    }\n});\nvar data = [];\n     _.each(Object.keys(mapDayToCount), function name(key) {\n        data.push( {'name': key,\n        'TodayCases': mapDayToCount[key].cases,\n         'Deaths': mapDayToCount[key].deaths,\n          'Recovered': mapDayToCount[key].recovered,\n          'Total': mapDayToCount[key].total\n           });\n    });\nconsole.log(data)\n      return (\n\n<div>\n<div>Country Name {counry}</div>\n<AreaChart width={1000} height={250} data={data}\n  margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n  <defs>\n    <linearGradient id=\"today\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n    \n    </linearGradient>\n    <linearGradient id=\"colorPv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n      <stop offset=\"5%\" stopColor=\"#ff0000\" stopOpacity={0.8}/>\n      <stop offset=\"95%\" stopColor=\"#ff0000\" stopOpacity={0}/>\n    </linearGradient>\n        <linearGradient id=\"recoverdPv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n      <stop offset=\"5%\" stopColor=\"#00ff00\" stopOpacity={0.8}/>\n      <stop offset=\"95%\" stopColor=\"#00ff00\" stopOpacity={0}/>\n    </linearGradient>\n\n    <linearGradient id=\"totalPv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n      <stop offset=\"5%\" stopColor=\"#ffc000\" stopOpacity={0.8}/>\n      <stop offset=\"95%\" stopColor=\"#ffc000\" stopOpacity={0}/>\n    </linearGradient>\n\n  </defs>\n  <XAxis dataKey=\"name\" />  \n  <YAxis />\n  <Tooltip />\n  <Area type=\"monotone\" dataKey=\"TodayCases\" stroke=\"#8884d8\" fillOpacity={1} fill=\"url(#today)\" />\n  <Area type=\"monotone\" dataKey=\"Deaths\" stroke=\"#ff0000\" fillOpacity={1} fill=\"url(#colorPv)\" />\n  <Area type=\"monotone\" dataKey=\"Recovered\" stroke=\"#00ff00\" fillOpacity={1} fill=\"url(#recoverdPv)\" />\n  <Area type=\"monotone\" dataKey=\"Total\" stroke=\"#ffc000\" fillOpacity={1} fill=\"url(#totalPv)\" />\n</AreaChart>\n</div>\n\n\n      );\n    }\n  }\n}\nexport default MyComponent;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Comp from './comp.jsx'\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis } from 'recharts';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n\n  <Comp/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}